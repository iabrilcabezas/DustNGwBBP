# These parameters are accessible to all stages
global:
    nside: 256
    compute_dell: False

# Python modules that are imported to find
# stage classes.  Any stages imported in these
# modules are automatically detected and their names can
# be used below
modules: bbpower

# The launcher to use
# These are defined in bbpipe/sites
launcher: local

# The list of stages to run and the number of processors
# to use for each.
stages:
    - name: BBCompSep
      nprocess: 1

# Definitions of where to find inputs for the overall pipeline.
# Any input required by a pipeline stage that is not generated by
# a previous stage must be defined here.  They are listed by tag.
# inputs:
#     cells_coadded: /global/cfs/cdirs/act/data/iabril/BBPower/230417/so_256_w2_p353_30_9_30_soflat_5.0_0.4_10_B_dcs_Cl_dfwt_tot.fits
#     cells_fiducial: /global/cfs/cdirs/act/data/iabril/BBPower/230417/cells_model_dfwt.fits
#     cells_noise:  /global/cfs/cdirs/act/data/iabril/BBPower/230414/so_256_w2_p353_30_9_30_soflat_5.0_0.4_10_B_dcs_Cl_dfwt_noi.fits
# Overall configuration file 
config: /global/common/software/act/iabril/python/DustNGwBBP/pte/bbcompsep_baseline.yml

# If all the outputs for a stage already exist then do not re-run that stage
resume: False

# Put all the output files in this directory:
# output_dir: /global/cfs/cdirs/act/data/iabril/BBPower/230417/outputs/

# Put the logs from the individual stages in this directory:
# log_dir: /global/cfs/cdirs/act/data/iabril/BBPower/230417/outputs/

# Put the log for the overall pipeline infrastructure in this file:
# pipeline_log: /global/cfs/cdirs/act/data/iabril/BBPower/230417/outputs/log.txt

BBCompSep:
    # Sampler type. Options are:
    #  - 'emcee': a full MCMC will be run using emcee.
    #  - 'fisher': only the Fisher matrix (i.e. the likelihood
    #        Hessian matrix) will be calculated around the fiducial
    #        parameters chosen as prior centers.
    #  - 'maximum_likelihood': only the best-fit parameters will
    #        be searched for.
    #  - 'single_point': only the chi^2 at the value used as the
    #        center for all parameter priors will be calculated.
    #  - 'timing': will compute the average time taken by one
    #        likelihood computation.
    #  - 'predicted_spectra': will compute predicted C_ells and
    #        save to file.
    sampler:  'predicted_spectra'
    predict_at_minimum: False
    predict_to_sacc: True
    # If you chose emcee:
    # Number of walkers
    nwalkers: 128
    # Number of iterations per walker
    n_iters: 100000
    # Likelihood type. Options are:
    #  - 'chi2': a standard chi-squared Gaussian likelihood.
    #  - 'h&l': Hamimeche & Lewis likelihood.
    likelihood_type: 'h&l'
    # Which polarization channels do you want to include?
    # Can be ['E'], ['B'] or ['E','B'].
    pol_channels: ['B']
    # Scale cuts (will apply to all frequencies)
    l_min: 30
    l_max: 300

    # CMB model
    cmb_model:
        # Template power spectrum. Should contained the lensed power spectra
        # with r=0 and r=1 respectively.
        cmb_templates: [/global/cfs/cdirs/act/software/iabril/condaenvs/github_reps/BBPower/examples/data/camb_lens_nobb.dat, 
                        /global/cfs/cdirs/act/software/iabril/condaenvs/github_reps/BBPower/examples/data/camb_lens_r1.dat]
        # Free parameters
        params:
            # tensor-to-scalar ratio
            # See below for the meaning of the different elements in the list.
            r_tensor: ['r_tensor', 'tophat', [-1, 0.0, 1]] # [-0.1, 0.00, 0.1]
            # Lensing amplitude
            A_lens: ['A_lens', 'tophat', [0.00,1.0,2.00]]

    # Foreground model
    fg_model:
        # Add one section per component. They should be called `component_X`,
        # starting with X=1
        component_1:
            # Name for this component
            name: Dust
            # Type of SED. Should be one of the classes stored in fgbuster.components
            # https://github.com/fgbuster/fgbuster/blob/master/fgbuster/component_model.py
            sed: Dust
            # Type of power spectra for all possible polarization channel combinations.
            # Any combinations not added here will be assumed to be zero.
            # The names should be one of the classes in bbpower/fgcls.py. This is quite
            # limiter for now, so consider adding to it if you want something fancier.
            cl:
                EE: ClPowerLaw
                BB: ClPowerLaw
            # Parameters of the SED
            sed_parameters:
                # The key can be anything you want, but each parameter in the model
                # must have a different name.
                # The first item in the list is the name of the parameter used by fgbuster
                # The second item is the type of prior. The last item are the numbers
                # necessary to define the prior. They should be:
                #  - Gaussian: [mean,sigma]
                #  - tophat: [lower edge, start value, upper edge]
                #  - fixed: [parameter value]
                # nu0-type parameters can only be fixed.
                beta_d: ['beta_d', 'Gaussian', [1.59, 0.5]] # 0.11
                temp_d: ['temp', 'fixed', [19.6]]
                nu0_d: ['nu0', 'fixed', [353.]]
            # decorr:
            #     decorr_amp_d: ['decorr_amp',  'fixed',  [1.0]] #
            #     decorr_nu01_d: ['decorr_nu01', 'fixed', [353.0]]
            #     decorr_nu02_d: ['decorr_nu02', 'fixed', [217.0]]
            cl_parameters:
                # Same for power spectrum parameters
                # (broken down by polarization channel combinations)
                BB:
                   amp_d_bb: ['amp', 'tophat', [0., 28., "inf"]]
                   alpha_d_bb: ['alpha', 'tophat', [-1., -0.54, 0.]]
                   l0_d_bb: ['ell0', 'fixed', [80.]]
            # If this component should be correlated with any other, list them here
            cross:
                # In this case the list should contain:
                # [component name, prior type, prior parameters]
                # Each of this will create a new parameter, corresponding to a constant
                # scale- and frequency-independend correlation coefficient between
                # the two components.
                epsilon_ds: ['component_2', 'tophat', [-1., 0., 1.]]

        component_2:
            name: Synchrotron
            sed: Synchrotron
            cl:
                EE: ClPowerLaw
                BB: ClPowerLaw
            sed_parameters:
                beta_s: ['beta_pl', 'Gaussian', [-3.0, 0.6]] # 0.3
                nu0_s: ['nu0', 'fixed', [23.]]
            # decorr:
            #     decorr_amp_s: ['decorr_amp', 'fixed', [1.0]]
            #     decorr_nu01_s: ['decorr_nu01', 'fixed', [40.0]]
            #     decorr_nu02_s: ['decorr_nu02', 'fixed', [23.0]]
            cl_parameters:
                BB:
                    amp_s_bb: ['amp', 'tophat', [0., 2., "inf"]]
                    alpha_s_bb: ['alpha', 'tophat', [-1., -0.6, 0.]]
                    l0_s_bb: ['ell0', 'fixed', [80.]]
